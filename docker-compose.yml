services:
  backend:
    build: .
    container_name: backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - shortener
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
      build: .
      container_name: worker
      command: python app/workers/manager_worker.py
      environment:
        - PYTHONPATH=/app
      volumes:
        - .:/app
      env_file:
        - .env
      depends_on:
        rabbitmq:
          condition: service_healthy
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
      networks:
        - shortener
      restart: unless-stopped
      healthcheck:
        test: ["CMD", "pgrep", "-f", "start_worker.py"]
        interval: 30s
        timeout: 5s
        retries: 3

  postgres:
    image: postgres:17
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - shortener
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    env_file:
      - .env
    networks:
      - shortener
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-password}
    env_file:
      - .env
    networks:
      - shortener
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./static:/static
    depends_on:
      - backend
    networks:
      - shortener
    restart: always

volumes:
  postgres_data:

networks:
  shortener:
    driver: bridge
